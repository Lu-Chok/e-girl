from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from loader import dp
import re

from db.worker import createOne
from db.worker import findOne
from db.worker import update
from db.mongo_collections import user as user_collection

from functions import keyboard
from functions import removeKeyboard

from girls.girls_vending_machine_2_0 import get_waifu
from girls.girls_vending_machine_2_0 import change_waifu_photo
from girls.girls_vending_machine_2_0 import refresh_waifu
from girls.girls_vending_machine_2_0 import get_waifu_by_chat_id

from db.roles import get_role

import base64
from io import BytesIO
from PIL import Image

mainMenuButtons = types.ReplyKeyboardRemove()

def get_caption(user, message):
    waifu = findOne({'chat_id' : user}, user_collection)
    if waifu == None:
        waifu = createOne({
            'chat_id' : user,
            'owner' : message.from_user.first_name,
            'name' : "–í–∞–π—Ñ—É",
            "health" : 10,
            "love" : "–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞"
        }, user_collection)

    try:
        name = waifu['name']
    except KeyError:
        name = '–í–∞–π—Ñ—É'
        update({'chat_id' : user}, {"name" : name}, user_collection)

    try:
        health = waifu['health']
    except KeyError:
        health = 10
        update({'chat_id' : user}, {"health" : health}, user_collection)

    try:
        love = waifu['love']
    except KeyError:
        love = '–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞'
        update({'chat_id' : user}, {"love" : love}, user_collection)
    
    try:
        owner = waifu['owner']
        owner_username = waifu['owner_username']
        if owner == message.from_user.first_name and owner_username == message.from_user.username:
            pass
        else:
            raise KeyError('KeyError')
    except KeyError:
        owner = message.from_user.first_name
        update({'chat_id' : user}, {"owner" : message.from_user.first_name, "owner_username" : message.from_user.username}, user_collection)

    caption = []
    caption.append(f'üìù *–ò–º—è:* {name}\n')
    caption.append(f'‚ù§Ô∏è *–ó–¥–æ—Ä–æ–≤—å–µ:* {health}/10')
    caption.append(f'üíñ *–õ—é–±–æ–≤—å:* {love}\n')
    caption.append(f'üèö *–•–æ–∑—è–∏–Ω:* {owner}')

    return '\n'.join(caption)

def get_caption_chat_id(chat_id):
    waifu = findOne({'chat_id' : chat_id}, user_collection)
    
    caption = []
    caption.append(f"üìù *–ò–º—è:* {waifu['name']}\n")
    caption.append(f"‚ù§Ô∏è *–ó–¥–æ—Ä–æ–≤—å–µ:* {waifu['health']}/10")
    caption.append(f"üíñ *–õ—é–±–æ–≤—å:* {waifu['love']}\n")
    caption.append(f"üèö *–•–æ–∑—è–∏–Ω:* {waifu['owner']}")

    return '\n'.join(caption)


@dp.message_handler(regexp='[–ú–º]–æ—è\s(–±–∞–±–∞|–≤–∞–π—Ñ—É|–¥–µ–≤–∫–∞)', state="*")
async def my_girl(message: types.Message, state: FSMContext):
    waifu = get_waifu(message)
    waifu_photo = BytesIO()
    waifu_photo.name = 'image.jpeg'
    Image.open(BytesIO(base64.b64decode(waifu['image']))).save(waifu_photo, 'JPEG')
    waifu_photo.seek(0)
    with waifu_photo as photo:
        await message.answer_photo(photo=photo, 
        caption=get_caption(message.from_user.id, message), 
        parse_mode="Markdown", 
        reply_markup=mainMenuButtons
    )



@dp.message_handler(regexp='([–ß—á]–ø–æ–∫–Ω—É—Ç—å\s).*', state="*")
async def chpok(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} —á–ø–æ–∫–Ω—É–ª(–∞) {message.text.split('–ø–æ–∫–Ω—É—Ç—å ')[1]}", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='([–ë–±]–∞–±–∞|[–í–≤]–∞–π—Ñ—É|[–î–¥]–µ–≤–∫–∞)\s@.*', state="*")
async def my_girl(message: types.Message, state: FSMContext):
    find_username = message.text.split('@')[1]
    
    found = findOne({"owner_username" : find_username}, user_collection)
    print(found)
    caption = get_caption_chat_id(found['chat_id'])
    waifu = get_waifu_by_chat_id(found['chat_id'])
    waifu_photo = BytesIO()
    waifu_photo.name = 'image.jpeg'
    Image.open(BytesIO(base64.b64decode(waifu['image']))).save(waifu_photo, 'JPEG')
    waifu_photo.seek(0)
    with waifu_photo as photo:
        await message.answer_photo(photo=photo, 
        caption=caption, 
        parse_mode="Markdown", 
        reply_markup=mainMenuButtons
    )


@dp.message_handler(content_types=['photo'], state="*")
async def my_girl(message: types.Message, state: FSMContext):
    if message.caption.lower() == '—Å–º–µ–Ω–∏—Ç—å –≤–∞–π—Ñ—É':
        if get_role(message) == 'vip' or get_role(message) != '' :
            waifu_photo = BytesIO()
            waifu_photo.name = 'image.jpeg'
            await message.photo[-1].download(waifu_photo)
            waifu_photo.seek(0)
            with waifu_photo as image_file:
                data = base64.b64encode(image_file.read()).decode('utf-8')
                change_waifu_photo(message, data)
                await message.answer('–§–æ—Ç–æ –≤–∞–π—Ñ—É —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', parse_mode='HTML', reply=False)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤', parse_mode='HTML', reply=False)

@dp.message_handler(regexp='[–¢|—Ç]–∏—Å–∫–∞—Ç—å', state="*")
async def squeeze(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} –∑–∞—Ç–∏—Å–∫–∞–ª(–∞) {re.sub(r'[–¢|—Ç]–∏—Å–∫–∞—Ç—å', '', message.text)}", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='[–î–¥]–∞—Ç—å\s.*\s–ø–æ\s(.*)', state="*")
async def punch(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} –¥–∞–ª(–∞) —Å–≤–æ–µ–π –≤–∞–π—Ñ—É –ø–æ {message.text.split('–ø–æ ')[1]}", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='[–ì–≥]–ª–∞–¥–∏—Ç—å\s.*\s–ø–æ\s(.*)', state="*")
async def pet_on(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} –ø–æ–≥–ª–∞–¥–∏–ª(–∞) —Å–≤–æ—é –≤–∞–π—Ñ—É –ø–æ {message.text.split('–ø–æ ')[1]}", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='[–ì–≥]–ª–∞–¥–∏—Ç—å', state="*")
async def pet(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} –ø–æ–≥–ª–∞–¥–∏–ª(–∞) {message.text.split('–ª–∞–¥–∏—Ç—å ')[1]}", reply=False, parse_mode="HTML") 


@dp.message_handler(regexp='[–û–æ]—Ç—à–ª–µ–ø–∞—Ç—å', state="*")
async def spank(message: types.Message, state: FSMContext):
    await message.reply(f"{message.from_user.first_name} –æ—Ç—à–ª–µ–ø–∞–ª(–∞) —Å–≤–æ—é –≤–∞–π—Ñ—É", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='[–î–¥]–∞—Ç—å\s.*\s–∏–º—è\s(.{1,64}$)', state="*")
async def give_name(message: types.Message, state: FSMContext):
    name = message.text.split('–∏–º—è ')[1]
    update({'chat_id' : message.from_user.id},{"name" : name}, user_collection)
    await message.reply(f"{message.from_user.first_name} –¥–∞–ª(–∞) —Å–≤–æ–µ –≤–∞–π—Ñ—É –∏–º—è {name}", reply=False, parse_mode="HTML")


@dp.message_handler(regexp='[–û–æ]–±–Ω–æ–≤–∏—Ç—å –≤–∞–π—Ñ—É', state="*")
async def refresh(message: types.Message, state: FSMContext):
    refresh_waifu(message)
    await message.reply(f"{message.from_user.first_name} –∏—Å–ø–æ–ª—å–∑—É—è –¥—É—à—É –¥—Ä—É–≥–æ–π –≤–∞–π—Ñ—É –æ–±–Ω–æ–≤–∏–ª –æ–±—Ä–∞–∑ —Å–≤–æ–µ–π –¥–µ–≤–æ—á–∫–∏", reply=False, parse_mode="HTML")


# @dp.message_handler(regexp='—Ä–æ–ª—å', state="*")
# async def give_name(message: types.Message, state: FSMContext):
#     role = get_role(message)
#     if get_role(message) == 'vip':
#     print(role)
#     await message.reply(f"{role}", reply=False, parse_mode="HTML")
